Аналитика полного цикла разработки в *почти* реальном времени

Я работаю в международном стартапе Athenian в качесте Head of Analytics и управляю командой бэкенда SaaS продукта. Мы продаем зарубежным компаниям облачное веб-приложение которое указывает на узкие места процессов разработки, непрерывной интеграции, деплоев, и JIRA. При этом стараемся придерживаться принципов blameless и non-personal, иначе говоря, делаем все возможное чтобы лиды-пользователи не стали сравнивать пиписьки рядовых разработчиков.

Одна из ключевых фишек Athenian - мы непрерывно анализируем поток событий GitHub и JIRA и обновляем все метрики и предсказания на лету. Это оказалось сложно, и я расскажу почему именно, какие ошибки мы допустили, как их исправляли и добились результата, и чего нам это стоило в $$$.

Тело:

+ Краткий обзор продукта Athenian.
+ Да, мы считаем доверительные интервалы по всем метрикам. Но это бесполезно.
+ Как получать события с GitHub. Node ID?
+ Приколы с событиями с GitHub. Они падают с 500, eventual consistency, косяки в их собственной базе.
+ Анализ исходного кода в SaaS.
+ Эпопея с релизами.
+ Тёмный лес непрерывной интеграции в GitHub.
+ Перформанс? Максимум 5с на запрос? На Питоне? Придется сильно попотеть.
+ А что там с JIRA.
+ JIRA<>GitHub identity matching.
+ Case study. Как мы потеряли клиента на $10к в месяц потому что делали свою работу слишком хорошо.
+ Case study. Pandas в аналитике реального времени.
+ Case study. Обучение. Все ваши метрики - херня, а то что мне нужно я сам посчитаю скриптом на 100 строк.
